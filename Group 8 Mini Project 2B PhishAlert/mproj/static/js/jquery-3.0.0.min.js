// Check if jQuery.migrateMute is undefined, and if so, set it to true to mute migration warnings.
void 0 === jQuery.migrateMute && (jQuery.migrateMute = !0), 
// Define a function to handle module loading and dependency injection.
function(e) {
    // If AMD (Asynchronous Module Definition) is supported, use it.
    "function" == typeof define && define.amd ? 
        define([ "jquery" ], window, e) : 
    // If CommonJS module system is supported, use it.
    "object" == typeof module && module.exports ? 
        module.exports = e(require("jquery"), window) : 
    // Otherwise, assume a global context and pass jQuery and window objects directly.
    e(jQuery, window);
}(function(e, t) {
    "use strict";
    // Function to log migration warnings to console.
    function r(r) {
        var n = t.console;
        // Check if the warning has already been logged.
        o[r] || (o[r] = !0, e.migrateWarnings.push(r), 
        // Log the warning to console if available and if logging is not muted.
        n && n.warn && !e.migrateMute && (n.warn("JQMIGRATE: " + r), 
        // Trace the warning if trace is enabled and supported by console.
        e.migrateTrace && n.trace && n.trace()));
    }
    // Function to define properties with warning logging.
    function n(e, t, n, a) {
        Object.defineProperty(e, t, {
            configurable: !0,
            enumerable: !0,
            get: function() {
                return r(a), n;
            },
            set: function(e) {
                r(a), n = e;
            }
        });
    }
    // Function to define methods with warning logging.
    function a(e, t, n, a) {
        e[t] = function() {
            return r(a), n.apply(this, arguments);
        };
    }
    // Version of jQuery Migrate being used.
    e.migrateVersion = "3.0.1", 
    // Log compatibility messages when loading.
    function() {
        var r = /^[12]\./;
        // Check if console logging is available.
        t.console && t.console.log && 
        // Check if jQuery version is compatible.
        (e && !r.test(e.fn.jquery) || t.console.log("JQMIGRATE: jQuery 3.0.0+ REQUIRED"), 
        // Log if Migrate plugin is loaded multiple times.
        e.migrateWarnings && t.console.log("JQMIGRATE: Migrate plugin loaded multiple times"), 
        // Log Migrate plugin installation information.
        t.console.log("JQMIGRATE: Migrate is installed" + (e.migrateMute ? "" : " with logging active") + ", version " + e.migrateVersion));
    }();
    // Object to track logged warnings.
    var o = {};
    // Array to store migration warnings.
    e.migrateWarnings = [], 
    // Enable migration tracing by default.
    void 0 === e.migrateTrace && (e.migrateTrace = !0), 
    // Function to reset warnings and logged messages.
    e.migrateReset = function() {
        o = {}, e.migrateWarnings.length = 0;
    }, 
    // Warn if running in Quirks Mode.
    "BackCompat" === t.document.compatMode && r("jQuery is not compatible with Quirks Mode");
    // Overriding jQuery's init method to handle special case.
    var i = e.fn.init;
    // Redefine jQuery's init method.
    e.fn.init = function(e) {
        var t = Array.prototype.slice.call(arguments);
        // Handling special case where selector is '#'.
        return "string" == typeof e && "#" === e && (r("jQuery( '#' ) is not a valid selector"), 
        t[0] = []), i.apply(this, t);
    }, 
    // Ensure prototype points to jQuery's prototype.
    e.fn.init.prototype = e.fn, 
    // Redefine jQuery's find method to handle special case.
    e.find = function(e) {
        var n = Array.prototype.slice.call(arguments);
        // Check for attribute selectors containing '#'.
        if ("string" == typeof e && c.test(e)) try {
            t.document.querySelector(e);
        } catch (a) {
            // Fix attribute selector if '#' is unquoted.
            e = e.replace(l, function(e, t, r, n) {
                return "[" + t + r + '"' + n + '"]';
            });
            try {
                // Check if fixed selector works.
                t.document.querySelector(e), r("Attribute selector with '#' must be quoted: " + n[0]), 
                n[0] = e;
            } catch (e) {
                // Log if attribute selector could not be fixed.
                r("Attribute selector with '#' was not fixed: " + n[0]);
            }
        }
        return u.apply(this, n);
    };
    // Copy existing properties from original jQuery find method.
    var u = e.find;
    for (d in u) Object.prototype.hasOwnProperty.call(u, d) && (e.find[d] = u[d]);
    // Deprecated method: size().
    e.fn.size = function() {
        return r("jQuery.fn.size() is deprecated and removed; use the .length property"), 
        this.length;
    }, 
    // Deprecated method: parseJSON().
    e.parseJSON = function() {
        return r("jQuery.parseJSON is deprecated; use JSON.parse"), JSON.parse.apply(null, arguments);
    }, 
    // Redefine isNumeric method with warning.
    e.isNumeric = function(t) {
        var n = s(t), a = function(t) {
            var r = t && t.toString();
            return !e.isArray(t) && r - parseFloat(r) + 1 >= 0;
        }(t);
        return n !== a && r("jQuery.isNumeric() should not be called on constructed objects"), 
        a;
    }, 
    // Deprecated method: holdReady().
    a(e, "holdReady", e.holdReady, "jQuery.holdReady is deprecated"), 
    // Deprecated method: unique().
    a(e, "unique", e.uniqueSort, "jQuery.unique is deprecated; use jQuery.uniqueSort"), 
    // Deprecated properties: filters, :.
    n(e.expr, "filters", e.expr.pseudos, "jQuery.expr.filters is deprecated; use jQuery.expr.pseudos"), 
    n(e.expr, ":", e.expr.pseudos, "jQuery.expr[':'] is deprecated; use jQuery.expr.pseudos");
    // Alias jQuery's ajax method.
    var p = e.ajax;
    // End of Migrate plugin code.

    // Redefine jQuery's ajax method with deprecation warnings.
e.ajax = function() {
    var e = p.apply(this, arguments);
    // Attach deprecation warnings to promise methods.
    return e.promise && (
        a(e, "success", e.done, "jQXHR.success is deprecated and removed"), 
        a(e, "error", e.fail, "jQXHR.error is deprecated and removed"), 
        a(e, "complete", e.always, "jQXHR.complete is deprecated and removed")
    ), e;
};
// Store references to original jQuery methods.
var f = e.fn.removeAttr, y = e.fn.toggleClass, m = /\S+/g;
// Redefine jQuery's removeAttr method with deprecation warnings.
e.fn.removeAttr = function(t) {
    var n = this;
    return e.each(t.match(m), function(t, a) {
        // Log warning for boolean properties.
        e.expr.match.bool.test(a) && (r("jQuery.fn.removeAttr no longer sets boolean properties: " + a), 
        n.prop(a, !1));
    }), f.apply(this, arguments);
};
// Redefine jQuery's toggleClass method with deprecation warnings.
e.fn.toggleClass = function(t) {
    return void 0 !== t && "boolean" != typeof t ? y.apply(this, arguments) : (
        r("jQuery.fn.toggleClass( boolean ) is deprecated"), 
        this.each(function() {
            var r = this.getAttribute && this.getAttribute("class") || "";
            // Toggle class based on attribute existence.
            r && e.data(this, "__className__", r), 
            this.setAttribute && this.setAttribute("class", r || !1 === t ? "" : e.data(this, "__className__") || "");
        })
    );
};
// Store the state of whether the swap method has been warned about.
var h = !1;
// Override jQuery's swap method to log deprecation warning.
e.swap && e.each([ "height", "width", "reliableMarginRight" ], function(t, r) {
    var n = e.cssHooks[r] && e.cssHooks[r].get;
    n && (e.cssHooks[r].get = function() {
        var e;
        return h = !0, e = n.apply(this, arguments), h = !1, e;
    });
}), 
// Redefine jQuery's swap method with deprecation warning.
e.swap = function(e, t, n, a) {
    var o, i, s = {};
    // Log warning if swap method is used without documentation.
    h || r("jQuery.swap() is undocumented and deprecated");
    // Store original style properties, apply new styles, then revert.
    for (i in t) s[i] = e.style[i], e.style[i] = t[i];
    o = n.apply(e, a || []);
    for (i in t) e.style[i] = s[i];
    return o;
};
// Store reference to original jQuery data method.
var g = e.data;
// Redefine jQuery's data method with deprecation warnings.
e.data = function(t, n, a) {
    var o;
    // Handle object assignment with deprecation warnings.
    if (n && "object" == typeof n && 2 === arguments.length) {
        o = e.hasData(t) && g.call(this, t);
        var i = {};
        for (var s in n) 
            s !== e.camelCase(s) ? (r("jQuery.data() always sets/gets camelCased names: " + s), o[s] = n[s]) : i[s] = n[s];
        return g.call(this, t, i), n;
    }
    // Handle string assignment with deprecation warnings.
    return n && "string" == typeof n && n !== e.camelCase(n) && (o = e.hasData(t) && g.call(this, t)) && n in o ? (
        r("jQuery.data() always sets/gets camelCased names: " + n), 
        arguments.length > 2 && (o[n] = a), o[n]
    ) : g.apply(this, arguments);
};
// Store reference to original jQuery Tween run method.
var v = e.Tween.prototype.run, j = function(e) {
    return e;
};
// Redefine jQuery Tween run method with deprecation warning.
e.Tween.prototype.run = function() {
    // Log warning if easing function takes more than one argument.
    e.easing[this.easing].length > 1 && (
        r("'jQuery.easing." + this.easing.toString() + "' should use only one argument"), 
        e.easing[this.easing] = j
    ), v.apply(this, arguments);
};
// Set default interval for jQuery animations if not already set.
e.fx.interval = e.fx.interval || 13, 
// Log warning if requestAnimationFrame is supported.
t.requestAnimationFrame && n(e.fx, "interval", e.fx.interval, "jQuery.fx.interval is deprecated");
// Store references to original jQuery load method and event methods.
var Q = e.fn.load, b = e.event.add, w = e.event.fix;
// Redefine jQuery's event handling methods with deprecation warnings.
e.event.props = [], e.event.fixHooks = {}, 
// Log warning if event props concat method is used.
n(e.event.props, "concat", e.event.props.concat, "jQuery.event.props.concat() is deprecated and removed"), 
e.event.fix = function(t) {
    var n, a = t.type, o = this.fixHooks[a], i = e.event.props;
    // Log warning if event props are accessed.
    if (i.length) for (r("jQuery.event.props are deprecated and removed: " + i.join()); i.length; ) e.event.addProp(i.pop());
    // Log warning if fixHooks are accessed.
    if (o && !o._migrated_ && (o._migrated_ = !0, r("jQuery.event.fixHooks are deprecated and removed: " + a), 
    (i = o.props) && i.length)) for (;i.length; ) e.event.addProp(i.pop());
    return n = w.call(this, t), o && o.filter ? o.filter(n, t) : n;
};
// Redefine jQuery's event add method with deprecation warning.
e.event.add = function(e, n) {
    return e === t && "load" === n && "complete" === t.document.readyState && r("jQuery(window).on('load'...) called after load event occurred"), 
    b.apply(this, arguments);
};
// Redefine jQuery's shorthand event methods with deprecation warnings.
e.each([ "load", "unload", "error" ], function(t, n) {
    e.fn[n] = function() {
        var e = Array.prototype.slice.call(arguments, 0);
        return "load" === n && "string" == typeof e[0] ? Q.apply(this, e) : (
            r("jQuery.fn." + n + "() is deprecated"), 
            e.splice(0, 0, n), 
            arguments.length ? this.on.apply(this, e) : (
                this.triggerHandler.apply(this, e), this
            )
        );
    };
});
// Redefine jQuery's event shorthand methods with deprecation warnings.
e.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(t, n) {
    e.fn[n] = function(e, t) {
        return r("jQuery.fn." + n + "() event shorthand is deprecated"), 
        arguments.length > 0 ? this.on(n, null, e, t) : this.trigger(n);
    };
});
// Trigger ready event on document ready.
e(function() {
    e(t.document).triggerHandler("ready");
});
// Redefine jQuery's ready event with deprecation warning.
e.event.special.ready = {
    setup: function() {
        this === t.document && r("'ready' event is deprecated");
    }
};
// Extend jQuery's fn methods with deprecation warnings.
e.fn.extend({
    bind: function(e, t, n) {
        // Log deprecation warning for bind method.
        return r("jQuery.fn.bind() is deprecated"), 
        // Use on method instead of bind.
        this.on(e, null, t, n);
    },
    unbind: function(e, t) {
        // Log deprecation warning for unbind method.
        return r("jQuery.fn.unbind() is deprecated"), 
        // Use off method instead of unbind.
        this.off(e, null, t);
    },
    delegate: function(e, t, n, a) {
        // Log deprecation warning for delegate method.
        return r("jQuery.fn.delegate() is deprecated"), 
        // Use on method instead of delegate.
        this.on(t, e, n, a);
    },
    undelegate: function(e, t, n) {
        // Log deprecation warning for undelegate method.
        return r("jQuery.fn.undelegate() is deprecated"), 
        // Use off method instead of undelegate.
        1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
    },
    hover: function(e, t) {
        // Log deprecation warning for hover method.
        return r("jQuery.fn.hover() is deprecated"), 
        // Use on method with mouseenter and mouseleave events instead of hover.
        this.on("mouseenter", e).on("mouseleave", t || e);

    }
});

    // Store reference to original jQuery offset method.
var x = e.fn.offset;
// Redefine jQuery's offset method with deprecation warnings.
e.fn.offset = function() {
    var n, a = this[0], o = {
        top: 0,
        left: 0
    };
    // Check if the element is connected to the document.
    return a && a.nodeType ? (
        n = (a.ownerDocument || t.document).documentElement, 
        e.contains(n, a) ? x.apply(this, arguments) : (
            r("jQuery.fn.offset() requires an element connected to a document"), 
            o
        )
    ) : (
        r("jQuery.fn.offset() requires a valid DOM element"), 
        o
    );
};
// Store reference to original jQuery param method.
var k = e.param;
// Redefine jQuery's param method with deprecation warnings.
e.param = function(t, n) {
    var a = e.ajaxSettings && e.ajaxSettings.traditional;
    return void 0 === n && a && (
        r("jQuery.param() no longer uses jQuery.ajaxSettings.traditional"), 
        n = a
    ), k.call(this, t, n);
};
// Store reference to original jQuery andSelf method.
var A = e.fn.andSelf || e.fn.addBack;
// Redefine jQuery's andSelf method with deprecation warnings.
e.fn.andSelf = function() {
    return r("jQuery.fn.andSelf() is deprecated and removed, use jQuery.fn.addBack()"), 
    A.apply(this, arguments);
};
// Store reference to original jQuery Deferred constructor.
var S = e.Deferred,
    // Define deferred methods with their corresponding callbacks and states.
    q = [
        [ "resolve", "done", e.Callbacks("once memory"), e.Callbacks("once memory"), "resolved" ],
        [ "reject", "fail", e.Callbacks("once memory"), e.Callbacks("once memory"), "rejected" ],
        [ "notify", "progress", e.Callbacks("memory"), e.Callbacks("memory") ]
    ];
// Redefine jQuery's Deferred constructor with deprecation warnings.
return e.Deferred = function(t) {
    var n = S(),
        a = n.promise();
    return n.pipe = a.pipe = function() {
        var t = arguments;
        return r("deferred.pipe() is deprecated"), 
        e.Deferred(function(r) {
            e.each(q, function(o, i) {
                var s = e.isFunction(t[o]) && t[o];
                n[i[1]](function() {
                    var t = s && s.apply(this, arguments);
                    t && e.isFunction(t.promise) ? t.promise().done(r.resolve).fail(r.reject).progress(r.notify) : r[i[0] + "With"](this === a ? r.promise() : this, s ? [ t ] : arguments);
                });
            }), t = null;
        }).promise();
    }, 
    // Call the provided callback function with the deferred object.
    t && t.call(n, n), n;
}, 
// Copy the exceptionHook property from original Deferred.
e.Deferred.exceptionHook = S.exceptionHook, 
// Return the modified jQuery object.
e;
});
